{"version":3,"file":"/Users/A1/Downloads/bueno2/src/backend/controllers/auth_controller.ts","sources":["/Users/A1/Downloads/bueno2/src/backend/controllers/auth_controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mCAAoD;AACpD,oEAAiE;AAGjE,gDAAoC;AAEpC,qBAA4B,eAAkC;IAA9D,iBAgDC;IA9CG,IAAM,eAAe,GAAG,UAAC,GAAY,EAAE,GAAa;QAChD,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAE7D,CAAC;;;;;wBACS,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;wBAChB,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;wBACnB,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;6BAE3B,CAAA,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAA,EAAnB,wBAAmB;wBACnB,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;wBACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;;;wBAErC,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAC,KAAK,CAAC,CAAC;wBACf,qBAAM,eAAe,CAAC,OAAO,CAAC;gCACvC,KAAK,EAAE;oCACH,KAAK,EAAE,KAAK;oCACZ,QAAQ,EAAE,QAAQ;iCACrB;6BACJ,CAAC,EAAA;;wBALI,IAAI,GAAG,SAKX;wBACF,IAAI,CAAC,IAAI,EAAE;4BACP,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;4BACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;yBACxC;6BAAM;4BACG,OAAO,GAAG,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;4BAChC,yCAAyC;4BACzC,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC;4BAClC,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;4BAEvC,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gCACtB,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gCACxC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;gCAC3C,GAAG,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;6BAC9B;iCAAM;gCACH,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;gCAC5C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;6BAClD;yBAEJ;;;;;aAER,CAAC,EAAE,CAAC;IACT,CAAC,CAAC;IAEF,OAAO;QACH,eAAe,iBAAA;KAClB,CAAC;AAEN,CAAC;AAhDD,kCAgDC;AAED;IACI,IAAM,QAAQ,GAAG,WAAW,CAAC,+BAAa,EAAE,CAAC,CAAC;IAC9C,IAAM,UAAU,GAAG,gBAAM,EAAE,CAAC;IAC5B,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAA,QAAQ;IACvD,OAAO,UAAU,CAAC;AACtB,CAAC;AALD,sCAKC","sourcesContent":["import { Router, Request, Response } from \"express\";\r\nimport { getRepository } from \"../respositories/user_repository\";\r\nimport { Repository } from \"typeorm\";\r\nimport { Users } from \"../entities/user\";\r\nimport * as jwt from \"jsonwebtoken\";\r\n\r\nexport function getHandlers(_userRepository: Repository<Users>) {\r\n    \r\n    const getTokenHandler = (req: Request, res: Response) => {\r\n        console.log(\"/api/v1/auth/login POST returns an auth token\");\r\n\r\n        (async () => {\r\n            const body = req.body;\r\n            const email = body.email;\r\n            const password = body.password;\r\n            //console.log(body);\r\n            if (!email || !password) {\r\n                console.log(\" 400 Bad Request!\");\r\n                res.status(400).send(\"Bad Request!\");\r\n            } else {\r\n                console.log(\" user \"+email);\r\n                const user = await _userRepository.findOne({\r\n                    where: {\r\n                        email: email,\r\n                        password: password\r\n                    }\r\n                });\r\n                if (!user) {\r\n                    console.log(\"  401 Unathorized\");\r\n                    res.status(401).send(\"Unathorized!\");\r\n                } else {\r\n                    const payload = { id: user.id };\r\n                    //const secret = process.env.AUTH_SECRET;\r\n                    process.env.AUTH_SECRET = user.password;\r\n                    const secret = process.env.AUTH_SECRET;\r\n\r\n                    if (typeof secret === \"string\") {\r\n                        const token = jwt.sign(payload, secret);\r\n                        console.log(\"  Token generated and sent!\");\r\n                        res.json({ token: token });\r\n                    } else {\r\n                        console.log(\"  500 Internal Server Error!\");\r\n                        res.status(500).send(\"Internal Server Error!\");\r\n                    }\r\n                    \r\n                }\r\n            }\r\n        })();\r\n    };\r\n\r\n    return {\r\n        getTokenHandler\r\n    };\r\n\r\n}\r\n\r\nexport function getAuthRouter() {\r\n    const handlers = getHandlers(getRepository());\r\n    const authRouter = Router();\r\n    authRouter.post(\"/\", handlers.getTokenHandler);//public\r\n    return authRouter;\r\n}\r\n"]}