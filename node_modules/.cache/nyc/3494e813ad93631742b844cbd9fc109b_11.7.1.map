{"version":3,"file":"/Users/A1/Downloads/bueno2/src/backend/middleware/auth_middleware.ts","sources":["/Users/A1/Downloads/bueno2/src/backend/middleware/auth_middleware.ts"],"names":[],"mappings":";;;;;AACA,8DAA+B;AAE/B,wBACI,GAAoB,EACpB,GAAqB,EACrB,IAA0B;IAE1B,IAAI;QACA,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAC5C,kCAAkC;QAClC,IAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAC3C,2BAA2B;QAC5B,6CAA6C;QAC5C,qDAAqD;QACrD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7C,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SACxC;aAAM;YACH,yCAAyC;YACzC,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;YACvC,4DAA4D;YAC5D,IAAI,CAAC,MAAM,EAAE;gBACT,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;gBAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;aAClD;iBAAM;gBACH,IAAI,OAAO,SAAK,CAAC;gBACjB,IAAI;oBACA,+BAA+B;oBAC/B,OAAO,GAAG,sBAAG,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAQ,CAAC;oBAC3C,oEAAoE;oBACpE,IAAG,KAAK,KAAI,MAAM,EAAC,GAAE;oBAAA,CAAC;iBACzB;gBAAC,OAAM,CAAC,EAAE;oBACP,mDAAmD;oBACnD,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;oBACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;iBACzC;gBACD,sCAAsC;gBACtC,sDAAsD;gBACrD,GAAW,CAAC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,EAAE,CAAC;gBACtC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBAEjC,sBAAsB;gBACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;gBACrB,IAAI,EAAE,CAAC;aACV;SACJ;KACJ;IAAC,OAAO,CAAC,EAAE;QACR,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;KAC1B;AACL,CAAC;AA/CD,wCA+CC","sourcesContent":["import express from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nexport function authMiddleware(\r\n    req: express.Request,\r\n    res: express.Response,\r\n    next: express.NextFunction\r\n) {\r\n    try {\r\n        console.log(\"Authorization authMiddleware\");\r\n        // Read token from request headers\r\n        const token = req.headers[\"authorization\"];\r\n        //console.log(req.headers);\r\n       // console.log(req.headers[\"authorization\"]);\r\n        // If no token not a string, it is an invalid request\r\n        if (token === undefined || Array.isArray(token)) {\r\n            console.log(\" 400 Bad request!\");\r\n            res.status(400).send(\"Bad request!\");\r\n        } else {\r\n            // Read secret from environment variables\r\n            const secret = process.env.AUTH_SECRET;\r\n            // If secret is undefined, there is an internal server error\r\n            if (!secret) {\r\n                console.log(\" 500 Internal Server Error!\");\r\n                res.status(500).send(\"Internal Server Error!\");\r\n            } else {\r\n                let decoded: any;\r\n                try {\r\n                    // Decode token and get user id\r\n                    decoded = jwt.verify(token, secret) as any;\r\n                    ////////////////////////////////////////////////////////////////////\r\n                    if(token=== secret){};\r\n                } catch(e) {\r\n                    // If cannot decode token, the user is unauthorized\r\n                    console.log(\"401 Unauthorized!\");\r\n                    res.status(401).send(\"Unauthorized!\");\r\n                }\r\n                // Attach current user to request objs\r\n                // Note that we don't need to do additional db queries\r\n                (req as any).body.userId = decoded.id;\r\n                console.log(\" User authorized!\");\r\n\r\n                // Invoke next handler\r\n                console.log(\" next\");\r\n                next();\r\n            }\r\n        }\r\n    } catch (e) {\r\n        res.status(500).send();\r\n    }\r\n}"]}